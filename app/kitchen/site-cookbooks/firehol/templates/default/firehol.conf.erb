# This configuration file will allow all requests originating from the
# local machine to be send through all network interfaces.
#
# No requests are allowed to come from the network. The host will be
# completely stealthed! It will not respond to anything, and it will
# not be pingable, although it will be able to originate anything
# (even pings to other hosts).
#

version 5

# HOSTS
#======

REMOTE_TECH_HOSTS="<%= @hosts[:remoteTech].join(" ") %>"

VIRTUAL_BOX_HOSTS="<%= @virtual_box_hosts %>"

LAN_HOSTS="<%= @lan_hosts %>"

ADMIN_HOSTS="${REMOTE_TECH_HOSTS} ${VIRTUAL_BOX_HOSTS}"

# ACL
#====

CONSUL_ACCESS="${ADMIN_HOSTS} <%= @consul_hosts %>"

# INTERFACES
#===========

# You can use more than one (space separated) and if your server has many aliases for the same interface
# You can use the plus sign to match them all (e.g. eth0+).
internet_interface="eth0+"

lan_interface="eth1"

docker_interface="docker+"

docker_virtual_subnets="veth+"

# CUSTOM SERVICES
#================

server_mosh_ports="udp/60000:61000"
client_mosh_ports="default 60000:61000"

server_kibana_ports="tcp/5601"
client_kibana_ports="default 5601"

server_jenkins_ports="tcp/8081"
client_jenkins_ports="default 8081"

server_graphite_ports="tcp/8080"
client_graphite_ports="default 8080"

server_rabbitmq_ports="tcp/15672"
client_rabbitmq_ports="default 15672"

# consul.io - Health checking, service discovery, key/value store
server_consul_ports="tcp/8300 udp/8300 tcp/8301 udp/8301 tcp/8302 udp/8302 tcp/8400 udp/8400 tcp/8500 udp/8500 tcp/8600 udp/8600"
client_consul_ports="default 8300 8301 8302 8400 8500 8600"

# BLACKLIST
#==========

# A space-separated list of IPs to be blocked.

email_brute_forcers=""

ftp_brute_forcers=""

ssh_brute_forcers=""

portscanners=""

BLACKLIST="${email_brute_forcers} ${ftp_brute_forcers} ${ssh_brute_forcers} ${portscanners}"

# Block all traffic from/to certain IPs
if [ ! -z "${BLACKLIST}" ]; then
    blacklist full "${BLACKLIST}"
fi

# CUSTOM SETTINGS
#================

# Fix unroutable IP addresses to allow misconfigured routers to connect.
newreserved_ips="0.0.0.0/8 127.0.0.0/8 169.254.0.0/16 255.255.255.255/32"
newprivate_ips="192.88.99.0/24 192.168.0.0/16"
NEW_UNROUTABLE_IPS="${newreserved_ips} ${newprivate_ips}"

# The protections you wish to have on the internet side of this host.
#internet_protections="invalid icmp-floods syn-floods malformed-xmas malformed-null malformed-bad"
internet_protections="all"

# At what frequency to accept requests from the internet?
internet_requests="5000/sec 10000"

# LOGGING
#========

# Set Firehol logging options for integration with psad.
FIREHOL_LOG_LEVEL="info"
FIREHOL_LOG_OPTIONS="--log-tcp-options --log-ip-options"
FIREHOL_LOG_FREQUENCY="1/second"
FIREHOL_LOG_BURST="5"

# Rules
#======

interface "${lan_interface}" lan
    policy reject
    client all accept
    server all accept src "${LAN_HOSTS}"

# Docker interfaces and router
interface "${docker_interface}" docker
    policy accept

interface "${docker_virtual_subnets}" veth
    policy accept

router dockerlan inface docker+ outface docker+
    client all accept
    server all accept

interface "${internet_interface}" internet src not "${NEW_UNROUTABLE_IPS}"

    protection "${internet_protections}" ${internet_requests}

    policy reject

    client all accept

    server icmp accept

    group with src "${ADMIN_HOSTS}"
        server ssh accept
        server rabbitmq accept
        server kibana accept
        server jenkins accept
        server graphite accept
    group end

    server ssh accept with knock SSH1
    server ssh accept with knock SSH2

    server mosh accept

    server consul accept src "${CONSUL_ACCESS}"
