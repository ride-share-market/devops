#!/usr/bin/env bash

# Usage:
# timeout 10 docker_iptables.sh
#
# Use the builtin shell timeout utility to prevent infinite loop (see below)

if [ ! -x /usr/bin/docker ]; then
    exit
fi

# Create a PRE_DOCKER table
iptables -N PRE_DOCKER

# Default action
iptables -I PRE_DOCKER -j DROP

# Docker Containers Public Admin access
<% @hosts[:remoteTech].each { |ip|  %>
iptables -I PRE_DOCKER -i eth0 -s <%= ip %> -j ACCEPT
<% } %>

# Docker Containers Restricted LAN Access
<% @lan_hosts.each { |ip|  %>
iptables -I PRE_DOCKER -i eth1 -s <%= ip %> -j ACCEPT
<% } %>

# Docker internal use
iptables -I PRE_DOCKER -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
iptables -I PRE_DOCKER -i docker0 ! -o docker0 -j ACCEPT
iptables -I PRE_DOCKER -m state --state RELATED -j ACCEPT
iptables -I PRE_DOCKER -i docker0 -o docker0 -j ACCEPT

# Docker Containers Public Access
<% if @enable_public_access %>

RSM_WWW_IP_CMD="/usr/bin/docker inspect --format='{{.NetworkSettings.IPAddress}}' rsm-nginx"

RSM_WWW_IP=$($RSM_WWW_IP_CMD)

# Double check, wait for docker socket (upstart docker.conf already does this)
while [ ! -e "/var/run/docker.sock" ]; do echo "Waiting for /var/run/docker.sock..."; sleep 1; done

# Wait for docker rsm-ngix container IP
while [ -z "$RSM_WWW_IP" ]; do echo "Waiting for rsm-nginx IP..."; RSM_WWW_IP=$($RSM_WWW_IP_CMD); done

iptables -I PRE_DOCKER -i eth0 -p tcp -d $RSM_WWW_IP --dport 80  -j ACCEPT
iptables -I PRE_DOCKER -i eth0 -p tcp -d $RSM_WWW_IP --dport 443 -j ACCEPT

<% end %>

# Finally insert the PRE_DOCKER table before the DOCKER table in the FORWARD chain.
iptables -I FORWARD -o docker0 -j PRE_DOCKER